\documentclass[a4paper,10pt]{article}
%\documentclass[a4paper,10pt]{scrartcl}

\usepackage[utf8]{inputenc}
\usepackage[margin=1in]{geometry}
\usepackage{tikz}
\usepackage{alltt}
\usepackage{fancyvrb}
\newcommand{\mytilde}{$\sim$}


\usepackage{float}
\pdfinfo{%
  /Title    (Custom Computing: Assessed Coursework)
  /Author   (Ioannis Kassinopoulos)
  /Creator  (Ioannis Kassinopoulos)
  /Producer (Ioannis Kassinopoulos)
  /Subject  (Custom Computing: Assessed Coursework)
  /Keywords (custom,computing,coursework,imperial)
}
\begin{document}

\title{Custom Computing: Assessed Coursework}
\author{Ioannis Kassinopoulos}
\date{\today}
\maketitle
\section*{Question 1}
\textbf{Recurring engin
eering costs} are the costs that will occur in a repeating fashion during the production, usually involving fabriction.
These costs are usually descriped in a per unit form.
\\[0.25cm]
\textbf{Non-recurring engineering cost} is the one-time up-front cost 
for research, design, testing and development of a new product.
\\[0.25cm]
As we can see below, the minimum number of units that need to be sold for the ASIC implementation to be cost-effective is 1 million units.
\\[0.25cm]
$C_{FPGA} > C_{ASIC}$
$\Rightarrow \pounds 2 \times N_{units} > \pounds 10^6 + \pounds 1 \times N_{units} $ 
$\Rightarrow N_{units} > 10^6$

\section*{Question 2}
\subsection*{(a) Diagramatic and symbolic Simulation}
\subsubsection*{Diagram of circuit Q1}
\begin{figure}[!h]
\begin{center}
\input{Q1.tex}
\caption{the circuit as derrived from Q1}
\end{center}
\end{figure}
\subsubsection*{Diagram of circuit P1}
\begin{figure}[!h]
\begin{center}
\input{P1Q1.tex}
\caption{the circuit as derrived from P1}
\end{center}
\end{figure}
\subsubsection*{Simulation}
The source code of the simulation (uninitialized delay) is the following:
\begin{Verbatim}[commandchars=\\\{\}]
INCLUDE "prelude.rby".
P1 n = Q1^n; fork^\mytilde1 .
Q1 = snd fork; rsh; [add,D^\mytilde1].
current = P1 4.
\end{Verbatim}
The result after executing \verb|re "a;b;c"|
\begin{Verbatim}[commandchars=\\\{\}]
0 - <a,?> ~ ((((a + ?) + ?) + ?) + ?)
1 - <b,?> ~ ((((b + ?) + ?) + ?) + ((((a + ?) + ?) + ?) + ?))
2 - <c,?> ~ ((((c + ?) + ?) + ((((a + ?) + ?) + ?) + ?)) + ((((b + ?) + ?) + ?) 
	  + ((((a + ?) + ?) + ?) + ?)))
\end{Verbatim}
The source code of the simulation (initialized delay with 0) is the following:
\begin{Verbatim}[commandchars=\\\{\}]
INCLUDE "prelude.rby".
P1 n = Q1^n; fork^\mytilde1 .
Q1 = snd fork; rsh; [add,DI 0^\mytilde1].
current = P1 4.
\end{Verbatim}
The result after executing \verb|re "a;b;c"|
\begin{Verbatim}[commandchars=\\\{\}]
0 - <a,0> ~ ((((a + 0) + 0) + 0) + 0)
1 - <b,0> ~ ((((b + 0) + 0) + 0) + ((((a + 0) + 0) + 0) + 0))
2 - <c,0> ~ ((((c + 0) + 0) + ((((a + 0) + 0) + 0) + 0)) + ((
	    ((b + 0) + 0) + 0) + ((((a + 0) + 0) + 0) + 0)))
\end{Verbatim}
The result after executing \verb|re -s 4 1"|
\begin{Verbatim}[commandchars=\\\{\}]
0 - <1,0> ~ 1
1 - <1,0> ~ 2
2 - <1,0> ~ 4
3 - <1,0> ~ 8
\end{Verbatim}
The simulation output (for 4 cycles) can be found in the included zip file.
\section*{Question 3}
\subsection*{(a) Proof by induction}
In order to show that $[P,Q]^{n};R = R;Q^n$ for $n>0$, we first have to show that it is $True$ for n = 1.
\\[0.5cm]
\textbf{Base case:} $[P,Q]^{1};R=R;Q^1$
\\[0.5cm]
This is intuitively shown to be true by the given assumption $[P,Q]^{n};R=R;Q$ which is equivalent.
\\[0.5cm]
Assuming that it is also true for  $n = k > 0$ 
\\[0.5cm]
\textbf{Inductive Hypothesis:} $[P,Q]^{k};R = R;Q^k$
\\[0.5cm]
We need to show that the same is true for $n = k+1$ and $[P,Q]^{k+1};R = R;Q^{k+1}$
\\[0.5cm]
 $[P,Q]^{k+1};R $ \textbf{LHS}
\\[0.25cm]
$= [P,Q]^k;[P,Q];R$ (by sequential expansion of $[P,Q]^{k+1}$)
\\[0.25cm]
$= [P,Q]^k;R;Q$ (since $[P,Q];R = R;Q$ given)
\\[0.25cm]
$= R;Q^k;Q$ (by the i.h. $[P,Q]^{k};R = R;Q^k$)
\\[0.25cm]
$= R;Q^{k+1}$ (by sequential contraction of $Q^{k};Q$)  \textbf{RHS}
\\[0.5cm]
So by induction we have \textbf{proved} that if $[P,Q];R = R;Q$ is given to be $True$, for $n>0$:
\\[0.5cm]
$[P,Q]^{n};R = R;Q^n$ 
is also $True$
\subsection*{(b) Inductive Definitions}
\subsubsection*{Right-reduction}
$rdr_1 = fst\:  [-]^{-1};R.$ \\[0.25cm]
$rdr_{n+1} = fst\:  apl_{n}^{-1};lsh;snd(rdr_n\: R);R.$
\subsubsection*{Delta (triangle)}
$\Delta_0 = [\: ].$ \\[0.25cm]
$\Delta_{n+1} = [\Delta_{n},R^n]\backslash apr_n.$
\subsection*{(c) Horner's Rule}
\subsubsection*{Left-hand side}
\begin{figure}[H]
\begin{center}
\input{hor1.tex}
\caption{LHS of the rule for n = 3}
\end{center}
\end{figure}
\subsubsection*{Right-hand side}
\begin{figure}[H]
\begin{center}
\input{hor2.tex}
\caption{RHS of the rule for n = 3}
\end{center}
\end{figure}
\subsection*{(d) Polynomial Evaluation}
R stands for the add operation (addition), P and Q both stand for multiplication by a constant (let this constant be x).
For the given coefficients $a_0,a_1,a_2,a_3$, the circuit will be the following.
\begin{figure}[H]
\begin{center}
\input{hormult.tex}
\caption{The optimised circuit as adjusted for polynomial evaluation}
\end{center}
\end{figure}
and the simulation written in Ruby: (x should be replace by the required number)
\begin{Verbatim}
INCLUDE "prelude.rby".
multc n = pi1^~1;snd n;mult.
Q = multc 'x'.
R = add.
POL n = rdr n (snd Q; R).
current = POL 3.
\end{Verbatim}
run with \verb|re "a_0 a_1 a_2 a_3"| produces the following output:
\begin{Verbatim}
Simulation start :

    0 - <<a_0,a_1,a_2>,a_3> ~ (a_0 + ((a_1 + ((a_2 + (a_3 * x)) * x)) * x))

Simulation end :
\end{Verbatim}
\section*{Question 4}
\subsection*{(a) Non-recursive definition of $btree_3$ and its type}
The non-recursive definition of $btree_3$ R is:
\begin{Verbatim}
 btree 3 R = [[R,R];R,[R,R];R];R.
\end{Verbatim}
and therefore its type is given by: \\[0.25cm]
$<<<X,X>,<X,X>>,<<X,X>,<X,X>>>\:  \sim \: X.$
\subsection*{(b) Fully pipelined timeless implementation of btree for timeless R}
\subsubsection*{Definition}
The system can be described by the following inductive equation: \\[0.25cm]
$pbtree_1 = R.$ \\[0.25cm]
$pbtree_{n+1} = [pbtree_n R,pbtree_n R];[D^n,D^n];R;AD^n.$
\subsubsection*{Proof by induction}


TRYING.
\\[10cm]
Here, we will try and prove that this equation is equivalent to the given. For readability we will
call the pipelined implementation p\_btree \\[0.5cm]
\textbf{Base Case:}  $p\_btree_1 = btree_1$ (required to show)\\[0.25cm]
$p\_btree_1$ \textbf{LHS} \\[0.25cm]
$=R$  (by definition of $btree$) \\[0.25cm]
$=p\_btree_1 $ (by definition of $p\_btree$) \textbf{RHS}
\\[0.5cm]
\textbf{Inductive Hypothesis:} $[pbtree_{k-1} R,pbtree_{k-1} R];[D^{k-1},D^{k-1}];R;AD^{k-1} = btree_k R$ \\[0.25cm]	
$[pbtree_k R,pbtree_k R];[D^k,D^k];R;AD^k$ \\[0.25cm]
$[(pbtree_k R;D^k),(pbtree_k R;D^k)];R;AD^k$ \\[0.25cm]
$pbtree_k R;D^k $ \\[0.25cm]
$= [pbtree_{k-1} R,pbtree_{k-1} R];[D^{k-1},D^{k-1}];R;AD^{k-1};D^k$\\[0.25cm]
$= [pbtree_{k-1} R,pbtree_{k-1} R];[D^{k-1},D^{k-1}];R;D$\\[2.25cm]
We need to show that: $p\_btree_{n+1} = btree_{n+1}.$ \\[0.25cm]
$p\_btree_{n+1}$ \textbf{LHS} \\[0.25cm]
$= [p\_btree_{n} R, p\_btree_{n} R]; (R\backslash D^{-1}).$ (by our definition of p\_btree) \\[0.25cm] 
$= [btree_{n} R, btree_{n} R]; (R\backslash D^{-1}).$ (by the inductive hypothesis) \\[0.25cm] 
$= [btree_{n} R, btree_{n} R];R.$ (by $\backslash D^{-1}$ elimination since R is timeless) \\[0.25cm]
$= btree_{n+1} R $ (by the definition of btree) \textbf{RHS}
\subsubsection*{Symbolic simulation of a binary adder}
\begin{Verbatim}
INCLUDE "prelude.rby".
btree n R = 
	IF (n $eq 1) THEN
		(R) 
	ELSE 
		([btree (n-1) R, btree (n-1) R];[D^(n-1),D^(n-1)]; add ; (AD^(n-1))).
current = btree 3 add.
\end{Verbatim}
The results:
\begin{Verbatim}
re -s 3a b c d p q r s
Simulation start :
    0 - <<<a_0,b_0>,<c_0,d_0>>,<<p_0,q_0>,<r_0,s_0>>> 
	  ~ (((a_0 + b_0) + (c_0 + d_0)) + ((p_0 + q_0) + (r_0 + s_0)))
    1 - <<<a_1,b_1>,<c_1,d_1>>,<<p_1,q_1>,<r_1,s_1>>> ~ ?
    2 - <<<a_2,b_2>,<c_2,d_2>>,<<p_2,q_2>,<r_2,s_2>>> ~ ?
Simulation end :
\end{Verbatim}

\subsection*{(c) Change of type}
In order to translate our implementation in a new one that expects a flat list of $n^2$ elements instead of nested sublists of tuples
we need to be able to break the flat list into $(n-1)^2$ tuples which themselves are nested in the same manner for n levels. To do this, we have to assume that
$btree_n$ for $n=2$ will be able to handle an <X,X,X,X> input and translate it into.\end{document}
